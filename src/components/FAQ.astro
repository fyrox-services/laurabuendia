---
import type { FAQ } from "@/types";
import MinimalArrow from "@/components/icons/MinimalArrow.astro";

interface Props {
  faqs: FAQ[];
}

const { faqs } = Astro.props;
---

<ul class="faq" itemtype="https://schema.org/FAQPage">
  {
    faqs.map(({ heading, text }, index) => {
      return (
        <li
          itemscope
          itemprop="mainEntity"
          itemtype="https://schema.org/Question"
        >
          <details aria-expanded={index === 0} open={index === 0}>
            <summary class={index === 0 ? "active" : ""} itemprop="name">
              <h3>
                {heading} <MinimalArrow width={25} height={25} />
              </h3>
            </summary>
            <div
              class="answer-content"
              itemscope
              itemprop="acceptedAnswer"
              itemtype="https://schema.org/Answer"
            >
              <p itemprop="text">{text}</p>
            </div>
          </details>
          <meta itemprop="position" content={(index + 1).toString()} />
        </li>
      );
    })
  }
</ul>

<script>
  document.addEventListener("astro:page-load", () => {
    document.querySelectorAll("details").forEach((detail) => {
      const summary = detail.querySelector("summary");
      const content = detail.querySelector(".answer-content");

      if (!summary || !content) return;

      summary.addEventListener("click", (e) => {
        e.preventDefault();
        summary.classList.toggle("active");

        const isOpen = detail.hasAttribute("open");

        if (isOpen) {
          // Animar cierre
          const closingAnim = content.animate(
            [
              { height: content.scrollHeight + "px", opacity: 1 },
              { height: "0px", opacity: 0 },
            ],
            {
              duration: 300,
              easing: "ease",
            }
          );

          closingAnim.onfinish = () => {
            detail.removeAttribute("open");
          };
        } else {
          // Preparar apertura
          detail.setAttribute("open", "true");
          const fullHeight = content.scrollHeight + "px";

          content.animate(
            [
              { height: "0px", opacity: 0 },
              { height: fullHeight, opacity: 1 },
            ],
            {
              duration: 300,
              easing: "ease",
            }
          );
        }
      });
    });
  });
</script>

<style is:global>
  summary svg {
    transition: transform 0.3s ease;
  }

  summary.active svg {
    transform: rotate(90deg);
  }
</style>

<style>
  ul {
    padding: 0 !important;
    margin: 2rem 0 0 !important;
    max-width: 600px;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  li {
    padding: 1rem 0;
    border-top: 1px solid var(--gray);
    list-style: none !important;
  }

  details {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  h3 {
    display: grid;
    grid-template-columns: 1fr auto;
    align-items: center;
    justify-content: space-between;
    gap: 0.5rem;
    margin: 0;
    font-size: var(--fs-xl) !important;
    cursor: pointer;
    color: var(--primary);
  }

  @media (min-width: 768px) {
    h3 {
      font-size: var(--fs-xl);
    }
  }

  summary {
    list-style: none;
  }

  summary::-webkit-details-marker {
    display: none;
  }

  svg {
    transition: transform 0.3s ease;
  }

  details[open] svg {
    transform: rotate(90deg);
  }

  p {
    font-size: var(--fs-md);
  }

  .answer-content {
    overflow: hidden;
  }
</style>
